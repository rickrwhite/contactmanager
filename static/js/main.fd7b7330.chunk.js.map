{"version":3,"sources":["context.js","components/contacts/Contact.js","components/contacts/Contacts.js","components/layout/TextInputGroup.js","components/contacts/AddContact.js","components/contacts/EditContact.js","components/layout/Header.js","components/pages/About.js","components/pages/NotFound.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","reducer","state","action","type","contacts","filter","contact","id","payload","map","Provider","dispatch","setState","axios","get","res","this","data","value","props","children","Component","Consumer","Contact","showContactInfo","onDeleteClick","a","delete","onShowClick","e","name","email","phone","className","onClick","style","cursor","float","color","bind","to","marginRight","Contacts","Fragment","key","TextInputGroup","label","placeholder","onChange","error","htmlFor","classnames","defaultProps","AddContact","errors","onSubmit","preventDefault","newContact","post","history","push","target","EditContact","updContact","match","params","put","Header","branding","href","App","exact","path","component","About","NotFound","rel","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.fd7b7330.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst Context = React.createContext();\r\n\r\nconst reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"DELETE_CONTACT\":\r\n      return {\r\n        ...state,\r\n        contacts: state.contacts.filter(\r\n          (contact) => contact.id !== action.payload\r\n        ),\r\n      };\r\n    case \"ADD_CONTACT\":\r\n      return {\r\n        ...state,\r\n        contacts: [action.payload, ...state.contacts],\r\n      };\r\n    case \"UPDATE_CONTACT\":\r\n      return {\r\n        ...state,\r\n        contacts: state.contacts.map((contact) =>\r\n          contact.id === action.payload.id\r\n            ? (contact = action.payload)\r\n            : contact\r\n        ),\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport class Provider extends Component {\r\n  state = {\r\n    contacts: [\r\n      // {\r\n      //   id: 1,\r\n      //   name: \"John Doe\",\r\n      //   email: \"jdoe@gmail.com\",\r\n      //   phone: \"555-555-5555\",\r\n      // },\r\n      // {\r\n      //   id: 2,\r\n      //   name: \"Karen Williams\",\r\n      //   email: \"kwilliams@gmail.com\",\r\n      //   phone: \"222-222-2222\",\r\n      // },\r\n      // {\r\n      //   id: 3,\r\n      //   name: \"Henry Johnson\",\r\n      //   email: \"hjohnson@gmail.com\",\r\n      //   phone: \"555-555-6666\",\r\n      // },\r\n    ],\r\n\r\n    dispatch: (action) => this.setState((state) => reducer(state, action)),\r\n  };\r\n\r\n  // componentDidMount() {\r\n  //   axios\r\n  //     .get(\"https://jsonplaceholder.typicode.com/users\")\r\n  //     .then((res) => this.setState({ contacts: res.data }));\r\n  // }\r\n\r\n  // Instead of using promise (then) as shown above, use async\r\n\r\n  async componentDidMount() {\r\n    const res = await axios.get(\"https://jsonplaceholder.typicode.com/users\");\r\n\r\n    this.setState({ contacts: res.data });\r\n    // .then((res) => this.setState({ contacts: res.data }));\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Context.Provider value={this.state}>\r\n        {this.props.children}\r\n      </Context.Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport const Consumer = Context.Consumer;\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Consumer } from \"../../context\";\r\nimport axios from \"axios\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n//import \"./contact.css\";\r\n\r\nclass Contact extends Component {\r\n  state = {\r\n    showContactInfo: false,\r\n  };\r\n\r\n  // Add the deleteClickHandler property at the bottom\r\n  onDeleteClick = async (id, dispatch) => {\r\n    // console.log(\"clicked\");\r\n    // this.props.deleteClickHandler();\r\n\r\n    //Make API call to back end\r\n\r\n    // axios\r\n    //   .delete(`https://jsonplaceholder.typicode.com/users/${id}`)\r\n    //   .then((res) => dispatch({ type: \"DELETE_CONTACT\", payload: id }));\r\n\r\n    await axios.delete(`https://jsonplaceholder.typicode.com/users/${id}`);\r\n\r\n    dispatch({ type: \"DELETE_CONTACT\", payload: id });\r\n    // dispatch({ type: \"DELETE_CONTACT\", payload: id });\r\n  };\r\n\r\n  // state = {};\r\n\r\n  onShowClick = (e) => {\r\n    this.setState({ showContactInfo: !this.state.showContactInfo });\r\n  };\r\n\r\n  // onShowClick() {\r\n  //   console.log(\"Hello World\");\r\n  // }\r\n  // Use 'this' to bind to something that is not part of Component\r\n  // onShowClick = (id, e) => {\r\n  //   console.log(id);\r\n  // };\r\n\r\n  render() {\r\n    // Alternately, we could use const to get the properties first\r\n    // and then use the names in the property names in the tags below..\r\n    //Ex. const {name, email, phone} = this.props\r\n    //    <h4>{name}</h4/>\r\n    //    <li>Email:{email}</li>\r\n    //    <li>Phone:{phone}</li>\r\n    // const { contact } = this.props;\r\n    // const { showContactInfo } = this.state;\r\n\r\n    //or add\r\n    //this.props.contact and change the objects to just name, email and phone\r\n\r\n    const { id, name, email, phone } = this.props.contact;\r\n    const { showContactInfo } = this.state;\r\n\r\n    return (\r\n      <Consumer>\r\n        {(value) => {\r\n          const { dispatch } = value;\r\n          return (\r\n            <div className=\"card card-body mb-3\">\r\n              <h4>\r\n                {name}\r\n                <i\r\n                  onClick={this.onShowClick}\r\n                  //   //onClick={this.onShowClick.bind(this, 1)}\r\n                  className=\"icon-sort-down\"\r\n                  style={{ cursor: \"pointer\" }}\r\n                ></i>\r\n                <i\r\n                  className=\"icon-remove\"\r\n                  style={{ cursor: \"pointer\", float: \"right\", color: \"red\" }}\r\n                  onClick={this.onDeleteClick.bind(this, id, dispatch)}\r\n                ></i>\r\n                <Link to={`/contact/edit/${id}`}>\r\n                  <i\r\n                    className=\"icon-pencil\"\r\n                    style={{\r\n                      cursor: \"pointer\",\r\n                      float: \"right\",\r\n                      color: \"black\",\r\n                      marginRight: \"1rem\",\r\n                    }}\r\n                  ></i>\r\n                </Link>\r\n              </h4>\r\n              {/* if true, show info else hide */}\r\n              {showContactInfo ? (\r\n                <ul className=\"list-group\">\r\n                  <li className=\"list-group-item\">Email: {email}</li>\r\n                  <li className=\"list-group-item\">Phone: {phone}</li>\r\n                </ul>\r\n              ) : null}\r\n            </div>\r\n          );\r\n        }}\r\n      </Consumer>\r\n      // <div className=\"card card-body mb-3\">\r\n      //   <h4>\r\n      //     {name}\r\n      //     {/* <i\r\n      //       onClick={() => console.log(\"Hello\")}\r\n      //       className=\"icon-sort-down\"\r\n      //     ></i> */}\r\n      //     <i\r\n      //       onClick={this.onShowClick}\r\n      //       //   //onClick={this.onShowClick.bind(this, 1)}\r\n      //       className=\"icon-sort-down\"\r\n      //       style={{ cursor: \"pointer\" }}\r\n      //     ></i>\r\n      //     <i\r\n      //       className=\"icon-remove\"\r\n      //       style={{ cursor: \"pointer\", float: \"right\", color: \"red\" }}\r\n      //       onClick={this.onDeleteClick}\r\n      //     ></i>\r\n\r\n      //     {/* <i onClick={() =>\r\n      //         this.setState({ showContactInfo: !this.state.showContactInfo })\r\n      //       } */}\r\n      //     {/* //onClick={this.onShowClick.bind(this, 1)}\r\n      //       className=\"icon-sort-down\"\r\n      //     ></i> */}\r\n      //   </h4>\r\n      //   {/* if true, show info else hide */}\r\n      //   {showContactInfo ? (\r\n      //     <ul className=\"list-group\">\r\n      //       <li className=\"list-group-item\">Email: {email}</li>\r\n      //       <li className=\"list-group-item\">Phone: {phone}</li>\r\n      //     </ul>\r\n      //   ) : null}\r\n      //   {/* // <ul className=\"list-group\">\r\n      //   //   <li className=\"list-group-item\">Email: {email}</li>\r\n      //   //   <li className=\"list-group-item\">Phone: {phone}</li>\r\n      //   // </ul> */}\r\n      // </div>\r\n    );\r\n  }\r\n}\r\n\r\nContact.propTypes = {\r\n  contact: PropTypes.object.isRequired,\r\n  // deleteClickHandler: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Contact;\r\n","import React, { Component } from \"react\";\r\nimport Contact from \"./Contact\";\r\nimport { Consumer } from \"../../context\";\r\n\r\n//state should ALWAYS be at the top!\r\n\r\nclass Contacts extends Component {\r\n  // You may not need a constructor.  Instead, you could use \"state = \" and then the array.\r\n\r\n  // constructor() {\r\n  //   super();\r\n  //   this.state = {\r\n  //     contacts: [\r\n  //       {\r\n  //         id: 1,\r\n  //         name: \"John Doe\",\r\n  //         email: \"jdoe@gmail.com\",\r\n  //         phone: \"555-555-5555\",\r\n  //       },\r\n  //       {\r\n  //         id: 2,\r\n  //         name: \"Karen Williams\",\r\n  //         email: \"kwilliams@gmail.com\",\r\n  //         phone: \"222-222-2222\",\r\n  //       },\r\n  //       {\r\n  //         id: 3,\r\n  //         name: \"Henry Johnson\",\r\n  //         email: \"hjohnson@gmail.com\",\r\n  //         phone: \"555-555-6666\",\r\n  //       },\r\n  //     ],\r\n  //   };\r\n  // }\r\n\r\n  // The delete will now be handled in context.js\r\n\r\n  // deleteContact = (id) => {\r\n  //   // console.log(\"123\");\r\n  //   // console.log(id);/\r\n  //   const { contacts } = this.state;\r\n\r\n  //   const newContacts = contacts.filter((contact) => contact.id !== id);\r\n\r\n  //   this.setState({\r\n  //     contacts: newContacts,\r\n  //   });\r\n  // };\r\n\r\n  render() {\r\n    //from context.js\r\n\r\n    return (\r\n      <Consumer>\r\n        {(value) => {\r\n          const { contacts } = value;\r\n          return (\r\n            <React.Fragment>\r\n              <h1 className=\"display-4 mb-2\">\r\n                <span className=\"text-danger\">Contact </span>\r\n                List\r\n              </h1>\r\n              {contacts.map((contact) => (\r\n                <Contact\r\n                  key={contact.id}\r\n                  // Instead of passing individual objects, you can pass the entire thing as\r\n                  contact={contact}\r\n                  // deleteClickHandler={this.deleteContact.bind(this, contact.id)\r\n                  //}\r\n                  // name={contact.name}\r\n                  // email={contact.email}\r\n                  // phone={contact.phone\r\n                />\r\n              ))}{\" \"}\r\n            </React.Fragment>\r\n          );\r\n        }}\r\n      </Consumer>\r\n    );\r\n\r\n    // const { contacts } = this.state;\r\n    // return (\r\n    //   <div>\r\n    //     {contacts.map((contact) => (\r\n    //       <Contact\r\n    //         key={contact.id}\r\n    //         // Instead of passing individual objects, you can pass the entire thing as\r\n    //         contact={contact}\r\n    //         deleteClickHandler={this.deleteContact.bind(this, contact.id)}\r\n    //         // name={contact.name}\r\n    //         // email={contact.email}\r\n    //         // phone={contact.phone}\r\n    //       />\r\n    //     ))}\r\n    //   </div>\r\n    // );\r\n  }\r\n}\r\n\r\nexport default Contacts;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport classnames from \"classnames\";\r\n\r\nconst TextInputGroup = ({\r\n  label,\r\n  name,\r\n  value,\r\n  placeholder,\r\n  type,\r\n  onChange,\r\n  error,\r\n}) => {\r\n  return (\r\n    <div className=\"form-group\">\r\n      <label htmlFor={name}>{label}</label>\r\n      <input\r\n        type={type}\r\n        name={name}\r\n        // className=\"form-control form control-lg\"\r\n        className={classnames(\"form-control form control-lg\", {\r\n          \"is-invalid\": error,\r\n        })}\r\n        placeholder={placeholder}\r\n        value={value}\r\n        onChange={onChange}\r\n      />\r\n      {error && <div className=\"invalid-feedback\">{error}</div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nTextInputGroup.propTypes = {\r\n  label: PropTypes.string.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  placeholder: PropTypes.string.isRequired,\r\n  value: PropTypes.string.isRequired,\r\n  type: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n  error: PropTypes.string,\r\n};\r\nTextInputGroup.defaultProps = {\r\n  type: \"text\",\r\n};\r\n\r\nexport default TextInputGroup;\r\n","import React, { Component } from \"react\";\r\nimport { Consumer } from \"../../context\";\r\nimport TextInputGroup from \"../layout/TextInputGroup\";\r\n// import uuid from \"react-uuid\";\r\nimport axios from \"axios\";\r\n\r\nclass AddContact extends Component {\r\n  state = {\r\n    name: \"\",\r\n    email: \"\",\r\n    phone: \"\",\r\n    errors: {},\r\n  };\r\n\r\n  onSubmit = async (dispatch, e) => {\r\n    e.preventDefault();\r\n    //console.log(this.state);\r\n    const { name, email, phone } = this.state;\r\n\r\n    // Check for errors\r\n\r\n    if (name === \"\") {\r\n      this.setState({ errors: { name: \"Name is required.\" } });\r\n      return;\r\n    }\r\n    if (email === \"\") {\r\n      this.setState({ errors: { email: \"Email is required.\" } });\r\n      return;\r\n    }\r\n    if (phone === \"\") {\r\n      this.setState({ errors: { phone: \"Phone is required.\" } });\r\n      return;\r\n    }\r\n\r\n    const newContact = {\r\n      // id: uuid(),\r\n      name,\r\n      email,\r\n      phone,\r\n    };\r\n\r\n    // axios\r\n    //   .post(\"https://jsonplaceholder.typicode.com/users\", newContact)\r\n    //   .then((res) => dispatch({ type: \"ADD_CONTACT\", payload: res.data }));\r\n\r\n    const res = await axios.post(\r\n      \"https://jsonplaceholder.typicode.com/users\",\r\n      newContact\r\n    );\r\n    dispatch({ type: \"ADD_CONTACT\", payload: res.data });\r\n\r\n    // dispatch({ type: \"ADD_CONTACT\", payload: newContact });\r\n\r\n    // Clear State\r\n    this.setState({\r\n      name: \"\",\r\n      email: \"\",\r\n      phone: \"\",\r\n      errors: {},\r\n    });\r\n\r\n    //Re-direct to home page\r\n\r\n    this.props.history.push(\"/\");\r\n  };\r\n\r\n  onChange = (e) => this.setState({ [e.target.name]: e.target.value });\r\n\r\n  render() {\r\n    const { name, email, phone, errors } = this.state;\r\n\r\n    return (\r\n      <Consumer>\r\n        {(value) => {\r\n          const { dispatch } = value;\r\n          return (\r\n            <div className=\"card mb-3\">\r\n              <div className=\"card-header\">Add Contact</div>\r\n              <div className=\"card-body\">\r\n                <form onSubmit={this.onSubmit.bind(this, dispatch)}>\r\n                  {/* <div className=\"form-group\">\r\n                    <label htmlFor=\"name\">Name</label>\r\n                    <input\r\n                      type=\"text\"\r\n                      name=\"name\"\r\n                      className=\"form-control form control-lg\"\r\n                      placeholder=\"Enter Name...\"\r\n                      value={name}\r\n                      onChange={this.onChange}\r\n                    />\r\n                  </div> */}\r\n                  <TextInputGroup\r\n                    label=\"Name\"\r\n                    name=\"name\"\r\n                    placeholder=\"Enter Name\"\r\n                    value={name}\r\n                    onChange={this.onChange}\r\n                    error={errors.name}\r\n                  />\r\n                  <TextInputGroup\r\n                    label=\"Email\"\r\n                    name=\"email\"\r\n                    type=\"email\"\r\n                    placeholder=\"Enter Email\"\r\n                    value={email}\r\n                    onChange={this.onChange}\r\n                    error={errors.email}\r\n                  />\r\n                  <TextInputGroup\r\n                    label=\"Phone\"\r\n                    name=\"phone\"\r\n                    placeholder=\"Enter Phone\"\r\n                    value={phone}\r\n                    onChange={this.onChange}\r\n                    error={errors.phone}\r\n                  />\r\n\r\n                  {/* <div className=\"form-group\">\r\n                    <label htmlFor=\"email\">Email</label>\r\n                    <input\r\n                      type=\"email\"\r\n                      name=\"email\"\r\n                      className=\"form-control form control-lg\"\r\n                      placeholder=\"Enter Email Address...\"\r\n                      value={email}\r\n                      onChange={this.onChange}\r\n                    />\r\n                  </div>\r\n                  <div className=\"form-group\">\r\n                    <label htmlFor=\"phone\">Phone</label>\r\n                    <input\r\n                      type=\"text\"\r\n                      name=\"phone\"\r\n                      className=\"form-control form control-lg\"\r\n                      placeholder=\"Enter Phone Number...\"\r\n                      value={phone}\r\n                      onChange={this.onChange}\r\n                    />\r\n                  </div> */}\r\n                  <input\r\n                    type=\"submit\"\r\n                    value=\"Add Contact\"\r\n                    className=\"btn btn-light btn-block\"\r\n                  />\r\n                </form>\r\n              </div>\r\n            </div>\r\n          );\r\n        }}\r\n      </Consumer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddContact;\r\n","import React, { Component } from \"react\";\r\nimport { Consumer } from \"../../context\";\r\nimport TextInputGroup from \"../layout/TextInputGroup\";\r\n// import uuid from \"react-uuid\";\r\nimport axios from \"axios\";\r\n\r\nclass EditContact extends Component {\r\n  state = {\r\n    name: \"\",\r\n    email: \"\",\r\n    phone: \"\",\r\n    errors: {},\r\n  };\r\n\r\n  async componentDidMount() {\r\n    const { id } = this.props.match.params;\r\n    const res = await axios.get(\r\n      `https://jsonplaceholder.typicode.com/users/${id}`\r\n    );\r\n    const contact = res.data;\r\n    this.setState({\r\n      name: contact.name,\r\n      email: contact.email,\r\n      phone: contact.phone,\r\n    });\r\n  }\r\n\r\n  onSubmit = async (dispatch, e) => {\r\n    e.preventDefault();\r\n    //console.log(this.state);\r\n    const { name, email, phone } = this.state;\r\n\r\n    // Check for errors\r\n\r\n    if (name === \"\") {\r\n      this.setState({ errors: { name: \"Name is required.\" } });\r\n      return;\r\n    }\r\n    if (email === \"\") {\r\n      this.setState({ errors: { email: \"Email is required.\" } });\r\n      return;\r\n    }\r\n    if (phone === \"\") {\r\n      this.setState({ errors: { phone: \"Phone is required.\" } });\r\n      return;\r\n    }\r\n\r\n    //PUT request\r\n\r\n    const updContact = {\r\n      name,\r\n      email,\r\n      phone,\r\n    };\r\n    const { id } = this.props.match.params;\r\n    const res = await axios.put(\r\n      `https://jsonplaceholder.typicode.com/users/${id}`,\r\n      updContact\r\n    );\r\n\r\n    dispatch({ type: \"UPDATE_CONTACT\", payload: res.data });\r\n\r\n    // Clear State\r\n    this.setState({\r\n      name: \"\",\r\n      email: \"\",\r\n      phone: \"\",\r\n      errors: {},\r\n    });\r\n\r\n    //Re-direct to home page\r\n\r\n    this.props.history.push(\"/\");\r\n  };\r\n\r\n  onChange = (e) => this.setState({ [e.target.name]: e.target.value });\r\n\r\n  render() {\r\n    const { name, email, phone, errors } = this.state;\r\n\r\n    return (\r\n      <Consumer>\r\n        {(value) => {\r\n          const { dispatch } = value;\r\n          return (\r\n            <div className=\"card mb-3\">\r\n              <div className=\"card-header\">Edit Contact</div>\r\n              <div className=\"card-body\">\r\n                <form onSubmit={this.onSubmit.bind(this, dispatch)}>\r\n                  <TextInputGroup\r\n                    label=\"Name\"\r\n                    name=\"name\"\r\n                    placeholder=\"Enter Name\"\r\n                    value={name}\r\n                    onChange={this.onChange}\r\n                    error={errors.name}\r\n                  />\r\n                  <TextInputGroup\r\n                    label=\"Email\"\r\n                    name=\"email\"\r\n                    type=\"email\"\r\n                    placeholder=\"Enter Email\"\r\n                    value={email}\r\n                    onChange={this.onChange}\r\n                    error={errors.email}\r\n                  />\r\n                  <TextInputGroup\r\n                    label=\"Phone\"\r\n                    name=\"phone\"\r\n                    placeholder=\"Enter Phone\"\r\n                    value={phone}\r\n                    onChange={this.onChange}\r\n                    error={errors.phone}\r\n                  />\r\n                  <input\r\n                    type=\"submit\"\r\n                    value=\"Update Contact\"\r\n                    className=\"btn btn-light btn-block\"\r\n                  />\r\n                </form>\r\n              </div>\r\n            </div>\r\n          );\r\n        }}\r\n      </Consumer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EditContact;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n// import PropTypes from \"prop-types\";\r\n//import { Link } from \"react-router-dom\";\r\n\r\nconst Header = (props) => {\r\n  const { branding } = props;\r\n  return (\r\n    // <div>\r\n    //   {/* {<h1 style={headingStyle}>{props.branding}</h1>} */}\r\n    //   <h1>{branding}</h1>\r\n    // </div>\r\n\r\n    <nav className=\"navbar navbar-expand-sm navbar-dark bg-danger mb-3 py-0\">\r\n      <div className=\"container\">\r\n        <a href=\"/\" className=\"navbar-brand\">\r\n          {branding}\r\n        </a>\r\n        <div>\r\n          <ul className=\"navbar-nav mr-auto\">\r\n            <li className=\"nav-item\">\r\n              <Link to=\"/\" className=\"nav-link\">\r\n                <i className=\"icon-home\"></i>\r\n                Home\r\n              </Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <Link to=\"/contact/add\" className=\"nav-link\">\r\n                <i className=\"icon-plus\"></i>\r\n                Add\r\n              </Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <Link to=\"/about\" className=\"nav-link\">\r\n                <i className=\"icon-question\"></i>\r\n                About\r\n              </Link>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\n// const headingStyle = {\r\n//   color: \"green\",\r\n//   fontSize: \"50px\",\r\n// };\r\n\r\n// Default properties\r\nHeader.defaultProps = {\r\n  branding: \"My App\",\r\n};\r\n// Header.propTypes = {\r\n//   branding: <propTypes className=\"string isrequired\"></propTypes>,\r\n// };\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nexport default () => {\r\n  return (\r\n    <div>\r\n      <h1 className=\"display-4\">\r\n        About Contact Manager\r\n        <p className=\"lead\">Simple app to manage contacts</p>\r\n        <p className=\"text-secondary\">Version 1.0.0</p>\r\n      </h1>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nexport default () => {\r\n  return (\r\n    <div>\r\n      <h1 className=\"display-4\">\r\n        <span className=\"text-danger\">404</span> Page Not Found\r\n      </h1>\r\n      <p className=\"lead\">Sorry, that page does not exist</p>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\n//import logo from \"./logo.svg\";\nimport Contacts from \"./components/contacts/Contacts\";\nimport AddContact from \"./components/contacts/AddContact\";\nimport EditContact from \"./components/contacts/EditContact\";\nimport Header from \"./components/layout/Header\";\nimport About from \"./components/pages/About\";\nimport NotFound from \"./components/pages/NotFound\";\nimport { Provider } from \"./context\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\n//import \"./App.css\";\n\nfunction App() {\n  return (\n    <Provider>\n      <Router>\n        <div className=\"App\">\n          <header className=\"App-header\">\n            {/* <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p> */}\n            <Header branding=\"Contact Manager\" />\n            <div className=\"container\">\n              <Switch>\n                <Route exact path=\"/\" component={Contacts} />\n                <Route exact path=\"/contact/add\" component={AddContact} />\n                <Route exact path=\"/contact/edit/:id\" component={EditContact} />\n                <Route exact path=\"/about\" component={About} />\n                <Route component={NotFound} />\n              </Switch>\n            </div>\n\n            <a\n              className=\"App-link\"\n              href=\"https://reactjs.org\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              {/* Learn React */}\n            </a>\n          </header>\n        </div>\n      </Router>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n//import './index.css';\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n// registerServiceWorker();\n"],"sourceRoot":""}